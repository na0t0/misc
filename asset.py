# -*- coding: utf-8 -*-
"""
5資産の最適なアセットアロケーションを計算
"""
import numpy as np
#-------------------------------------------------
# input data
#-------------------------------------------------
r = [1.00,4.80,3.50,5.00,9.25] # 期待収益率
rho = [[1,0.16,-0.06,-0.05,-0.29],
[0.16,1,-0.25,0.27,0.73],
[-0.06,-0.25,1,0.56,0.11],
[-0.05,0.27,0.56,1,0.91],
[-0.29,0.73,0.11,0.91,1]] # 相関係数
sigma=[5.4,22.15,13.25,19.59,26.25] # 標準偏差

#-------------------------------------------------
# 本文
#-------------------------------------------------
n=5 # 資産の数
rmin=4 # 最低限欲しいと思う期待収益率
nmax=100 # 投資比率の精度(大きいほど精度が高くなるが計算時間は長くなる)
x=[0]*n # 配列の器の設定
xmin=[0]*n # ｘは逐次更新されてしまうので別で保存するための配列
sigmap_min=1000000 # 適当に大きい値を設定
err=1e-6 # 許容する誤差
for x0 in range(0,nmax):
    x[0]=x0/nmax
    for x1 in range(0,nmax):
        x[1]=x1/nmax
        count=x[0]+x[1]
        if count>1+err: # 投資比率が100%を超えているとき
            break # この内側のfor文を抜ける
        for x2 in range(0,nmax):
            x[2]=x2/nmax
            count=x[0]+x[1]+x[2]
            if count>1+err: # 投資比率が100%を超えているとき
                break # この内側のfor文を抜ける            
            for x3 in range(0,nmax):
                x[3]=x3/nmax
                count=x[0]+x[1]+x[2]+x[3]
                if count>1+err: # 投資比率が100%を超えているとき
                    break # この内側のfor文を抜ける                 
                x[4]=round(1-count,6) # 誤差があるので1E-6で四捨五入
                #------------------------
                # 期待収益率
                #------------------------   
                rp=0
                for i in range(0,n):
                    rp+=r[i]*x[i]
                if rp<rmin: # 最低限欲しいと思う期待収益率未満の場合
                    break
                if rp>rmin+0.1: # 計算時間短縮のため
                    break
                #------------------------
                # 標準偏差
                #------------------------
                sigmap=0
                for i in range(0,n):
                    for j in range(0,n):
                        sigmap+=rho[i][j]*sigma[i]*sigma[j]*x[i]*x[j]
                if sigmap<sigmap_min:
                    sigmap_min=sigmap # 標準偏差（ここではまだ分散）をより小さい値に更新
                    xmin[:]=x[:] # 標準偏差が最小のときのｘを別の配列に保存
                    rpt=rp # 期待収益率を別で保存
sigmap_min=np.sqrt(sigmap_min) # 分散から標準偏差に変換
print('ポートフォリオの期待収益率 {:.2f}'.format(rpt))
print('ポートフォリオの標準偏差 {:.2f}'.format(sigmap_min))
print('最適な投資比率',xmin)